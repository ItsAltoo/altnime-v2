generator client {
  provider = "prisma-client-js"
  runtime  = "edge-light"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String   
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  passwordResetTokens PasswordResetToken[]
  libraries     Library[]

  @@map("users")
  @@unique([email,name])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique @db.Text
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Library {
  id        String   @id @default(cuid())
  userId    String
  userEmail String?
  cards     CardLibrary[]

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("libraries")
}

model CardLibrary {
  id        String   @id @default(cuid())
  animeId   Int
  imageUrl  String
  title     String?
  name      String?
  status    String?
  type      String?
  score     String?
  episodes  Int?
  chapters  Int?

  libraryId String
  library   Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  @@map("card_libraries")
}